// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: school.proto

package school_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	School_AddStudent_FullMethodName          = "/data.School/AddStudent"
	School_AddScoreOfStudent_FullMethodName   = "/data.School/AddScoreOfStudent"
	School_CalculateFinalScore_FullMethodName = "/data.School/calculateFinalScore"
	School_SearchStudentByID_FullMethodName   = "/data.School/SearchStudentByID"
)

// SchoolClient is the client API for School service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolClient interface {
	AddStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResponse, error)
	AddScoreOfStudent(ctx context.Context, in *StudentScoreRequest, opts ...grpc.CallOption) (*StudentResponse, error)
	CalculateFinalScore(ctx context.Context, in *StudentFinalScoreRequest, opts ...grpc.CallOption) (*StudentResponse, error)
	SearchStudentByID(ctx context.Context, in *StudentSearchRequest, opts ...grpc.CallOption) (*StudentSearchResponse, error)
}

type schoolClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolClient(cc grpc.ClientConnInterface) SchoolClient {
	return &schoolClient{cc}
}

func (c *schoolClient) AddStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentResponse)
	err := c.cc.Invoke(ctx, School_AddStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) AddScoreOfStudent(ctx context.Context, in *StudentScoreRequest, opts ...grpc.CallOption) (*StudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentResponse)
	err := c.cc.Invoke(ctx, School_AddScoreOfStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) CalculateFinalScore(ctx context.Context, in *StudentFinalScoreRequest, opts ...grpc.CallOption) (*StudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentResponse)
	err := c.cc.Invoke(ctx, School_CalculateFinalScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolClient) SearchStudentByID(ctx context.Context, in *StudentSearchRequest, opts ...grpc.CallOption) (*StudentSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentSearchResponse)
	err := c.cc.Invoke(ctx, School_SearchStudentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServer is the server API for School service.
// All implementations must embed UnimplementedSchoolServer
// for forward compatibility.
type SchoolServer interface {
	AddStudent(context.Context, *StudentRequest) (*StudentResponse, error)
	AddScoreOfStudent(context.Context, *StudentScoreRequest) (*StudentResponse, error)
	CalculateFinalScore(context.Context, *StudentFinalScoreRequest) (*StudentResponse, error)
	SearchStudentByID(context.Context, *StudentSearchRequest) (*StudentSearchResponse, error)
	mustEmbedUnimplementedSchoolServer()
}

// UnimplementedSchoolServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchoolServer struct{}

func (UnimplementedSchoolServer) AddStudent(context.Context, *StudentRequest) (*StudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedSchoolServer) AddScoreOfStudent(context.Context, *StudentScoreRequest) (*StudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScoreOfStudent not implemented")
}
func (UnimplementedSchoolServer) CalculateFinalScore(context.Context, *StudentFinalScoreRequest) (*StudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFinalScore not implemented")
}
func (UnimplementedSchoolServer) SearchStudentByID(context.Context, *StudentSearchRequest) (*StudentSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStudentByID not implemented")
}
func (UnimplementedSchoolServer) mustEmbedUnimplementedSchoolServer() {}
func (UnimplementedSchoolServer) testEmbeddedByValue()                {}

// UnsafeSchoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServer will
// result in compilation errors.
type UnsafeSchoolServer interface {
	mustEmbedUnimplementedSchoolServer()
}

func RegisterSchoolServer(s grpc.ServiceRegistrar, srv SchoolServer) {
	// If the following call pancis, it indicates UnimplementedSchoolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&School_ServiceDesc, srv)
}

func _School_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_AddStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).AddStudent(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_AddScoreOfStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).AddScoreOfStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_AddScoreOfStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).AddScoreOfStudent(ctx, req.(*StudentScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_CalculateFinalScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentFinalScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).CalculateFinalScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_CalculateFinalScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).CalculateFinalScore(ctx, req.(*StudentFinalScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _School_SearchStudentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServer).SearchStudentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: School_SearchStudentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServer).SearchStudentByID(ctx, req.(*StudentSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// School_ServiceDesc is the grpc.ServiceDesc for School service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var School_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.School",
	HandlerType: (*SchoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStudent",
			Handler:    _School_AddStudent_Handler,
		},
		{
			MethodName: "AddScoreOfStudent",
			Handler:    _School_AddScoreOfStudent_Handler,
		},
		{
			MethodName: "calculateFinalScore",
			Handler:    _School_CalculateFinalScore_Handler,
		},
		{
			MethodName: "SearchStudentByID",
			Handler:    _School_SearchStudentByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school.proto",
}
